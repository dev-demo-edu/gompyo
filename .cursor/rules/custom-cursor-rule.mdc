---
description:
globs:
alwaysApply: true
---
# Cursor Code Editing Rule

## 1. 기능 단위 개발
- 작업을 시작할 때, 구현할 기능을 명확히 정의한다.
- 기능을 개발하는 동안에는 해당 기능과 직접적으로 관련된 코드만 수정한다.
- 기능 개발이 완료되면, 코드의 실행 및 정상 동작 여부를 확인한다.

## 2. 오류 수정 및 검증
- 기능 개발 후 즉시 오류를 점검하고, 모든 오류를 수정한 후에만 커밋을 진행한다.
- 코드 실행 중 발생하는 에러 메시지를 확인하고 이를 해결한다.
- 필요한 경우 테스트 코드를 작성하여 기능이 올바르게 동작하는지 확인한다.

## 3. 커밋 규칙
- 하나의 기능이 완전히 구현되고 오류가 없는 상태에서만 커밋을 수행한다.
- 커밋 메시지는 다음 규칙을 따른다:
  - `[Feature]` 새로운 기능 추가
  - `[Fix]` 버그 수정
  - `[Refactor]` 코드 리팩토링
  - `[Docs]` 문서 수정
  - `[Test]` 테스트 코드 추가 및 수정
  - `[Chore]` 기타 작업 (예: 의존성 업데이트)
- 예시:[Feature] 예약 시스템에서 사용자가 날짜별 예약을 조회하는 기능 추가
      [Fix] 예약 리스트가 날짜별로 정렬되지 않는 문제 해결
## 4. 코드 품질 및 스타일
- 공식 문서에서 권장하는 코드 스타일을 준수한다.
- 불필요한 코드나 중복을 줄이기 위해 리팩토링을 적극 활용한다.
- 가독성을 높이기 위해 의미 있는 변수명과 함수명을 사용한다.

## 5. 반복 작업 최소화
- 동일한 작업을 반복하지 않도록 모듈화와 재사용성을 고려하여 코드를 작성한다.
- 코드 작성 중 유사한 패턴이 발견되면 이를 함수나 클래스로 분리한다.

## 6. 기타
- Git 브랜치를 사용할 경우, 브랜치 이름은 `feature/원본브랜치명/기능명/#github이슈번호` 또는 `fix/원본브랜치명/수정내용/#github이슈번호` 형식으로 작성한다.
- 필요할 경우, 커밋 전에 주요 변경 사항을 리뷰한다.
