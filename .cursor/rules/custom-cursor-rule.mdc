---
description:
globs:
alwaysApply: true
---
# Conventions

## Package Manager

`pnpm`을 사용하여 패키지를 관리합니다.

## Git Convention

- 깃 브랜치 전략은 GitFlow를 따르며 이를 기반으로 한 브랜치 네이밍 컨벤션을 사용합니다.
- 브랜치 네이밍 형식: `type/[branch/]description[-#issue]`
  - [] 안의 내용은 선택 사항입니다.
  - `type`: 브랜치 타입
  - `branch`: 분기한 브랜치명 (e.g. `dev`, `main`)
  - `description`: 브랜치 설명
  - `issue`: 관련된 이슈 번호

### Branch Type Description

- **feat** (feature)
  새로운 기능을 추가할 때 사용합니다.
  예: `feat/login-#123`
- **fix** (bug fix)
  버그를 수정할 때 사용합니다.
  예: `fix/button-click-#456`
- **docs** (documentation)
  문서 작업(README, 주석 등)을 할 때 사용합니다.
  예: `docs/api-docs-#789`
- **style** (formatting, missing semi colons, …)
  코드 스타일(포맷 수정, 세미콜론 추가 등)을 수정할 때 사용합니다. 기능 수정은 포함되지 않습니다.
  예: `style/css-format-#101`
- **refactor**
  코드 리팩토링(기능 변경 없이 코드 구조 개선)을 할 때 사용합니다.
  예: `refactor/auth-service-#102`
- **test** (when adding missing tests)
  테스트 코드를 추가하거나 수정할 때 사용합니다.
  예: `test/unit-tests-#103`
- **chore** (maintain)
  프로젝트 유지 보수 작업(빌드 설정, 패키지 업데이트 등)을 할 때 사용합니다.
  예: `chore/dependency-update-#104`

### Commit Message Convention

`git config --local commit.template .github/.gitmessage` 명령어를 통해 커밋 메시지 템플릿을 설정할 수 있습니다.
컨벤션 내용은 AngularJS Git Commit Message Conventions와 Conventional Commits을 기반으로 작성되어 있으며 @.gitmessage 파일에 작성되어 있습니다.

## NextJS Convention

### File Convention

- `kebab-case` 로 작성합니다.
- `not-found.js`, `date-picker.js` 처럼, 최대한 간결하게 하되, 단어 사이는 하이픈으로 연결합니다.

### Function/Variable Convention

- `camelCase` 로 작성합니다.
- TypeScript 타입은 반드시 정의해야 합니다.

### Component Convention

- `PascalCase` 로 작성합니다.
- Component는 재사용 가능하도록 설계해야 합니다.

### Directory Convention

`app` 외부에 프로젝트 파일 저장하는 방법을 사용합니다.

#### src/app

- 라우팅 용으로 사용한다. (라우팅과 관련된 파일만 넣어놓는다)
- e.g., `page.tsx`, `layout.tsx`, `opengraph-image.tsx`

#### src/containers

- `page.tsx` 안에서 보여줄 컨텐츠들을 넣어놓는다.

#### src/components

- 여러 페이지에서 공통으로 사용할 컴포넌트
- Button, Loading...

#### src/constants

- 공통으로 사용 할 상수

#### src/hooks

- 페이지 곳곳에서 사용되는 공통 훅

#### src/libs

- 외부 라이브러리를 모아둔다. package.json때문에 쓸 일이 많지 않지만 튜닝해서 사용할 경우 발생

#### src/services

- 각종 API 요청
- GET, POST, PATCH...

#### src/states

- 페이지 곳곳에서 사용되는 state를 모아두는 곳
- 전역 상태관리 남발하지 않는다. (props drilling을 막기 위해서는 `Jotai`를 사용)

#### src/types

- 각종 타입 스크립트의 정의가 들어가는 곳

## Module Convention

### MUI Component

- 모든 UI 컴포넌트는 MUI를 사용해야 합니다.
- 예시: `import Button from '@mui/material/Button';`

### Heroicons

- 모든 아이콘은 Heroicons를 사용해야 합니다.
- 아이콘 임포트 방법: `import { IconName } from '@heroicons/react/24/outline';`
- 예시: `import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';`
