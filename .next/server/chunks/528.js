"use strict";exports.id=528,exports.ids=[528],exports.modules={5485:(e,t,a)=>{a.d(t,{T:()=>m});var r=a(13913),n=a(8613),i=a(98149),s=a(22327);class m{constructor(){this.costDetailService=new s.G}async create(e){let[t]=await r.db.insert(n.costs).values(e).returning();return t}async findById(e){let[t]=await r.db.select().from(n.costs).where((0,i.eq)(n.costs.id,e));return t}async findAll(){return await r.db.select().from(n.costs)}async findByCargoId(e){let[t]=await r.db.select().from(n.costs).where((0,i.eq)(n.costs.cargoId,e));return t}async update(e,t){let[a]=await r.db.update(n.costs).set(t).where((0,i.eq)(n.costs.id,e)).returning();return a}async delete(e){await this.costDetailService.deleteByCostId(e);let[t]=await r.db.delete(n.costs).where((0,i.eq)(n.costs.id,e)).returning();return t}}},8613:(e,t,a)=>{a.r(t),a.d(t,{cargos:()=>R,cargosRelations:()=>S,contracts:()=>v,contractsRelations:()=>B,costDetails:()=>q,costDetailsRelations:()=>x,costs:()=>D,costsRelations:()=>K,documents:()=>T,documentsRelations:()=>M,historyLogs:()=>b,historyLogsRelations:()=>O,importers:()=>f,importersRelations:()=>Q,items:()=>P,itemsRelations:()=>F,payments:()=>g,paymentsRelations:()=>E,paymentsTt:()=>_,paymentsTtRelations:()=>C,paymentsUsance:()=>N,paymentsUsanceRelations:()=>U,shipments:()=>A,shipmentsRelations:()=>k,users:()=>I});var r=a(87985),n=a(71198),i=a(70228),s=a(10215),m=a(75263),d=a(49778),o=a(28370);let c=e=>e.value?new Date(e.value).toLocaleDateString("ko-KR",{year:"numeric",month:"long",day:"numeric"}):"",l=e=>e.value?new Intl.NumberFormat("ko-KR",{style:"currency",currency:"KRW"}).format(e.value):"",y=e=>e.value?new Intl.NumberFormat("ko-KR",{style:"currency",currency:"KRW",minimumFractionDigits:0,maximumFractionDigits:0}).format(e.value)+"/kg":"",u=[{field:"contractNumber",headerName:"계약 번호",width:130},{field:"progressStatus",headerName:"진행 상태",width:100},{field:"contractDate",headerName:"계약일자",valueFormatter:c,width:150},{field:"exporter",headerName:"공급업체",width:120},{field:"importer",headerName:"수입회사",width:120},{field:"estimatedTimeArrival",headerName:"ETA",valueFormatter:c,width:150},{field:"arrivalPort",headerName:"도착항",width:120},{field:"itemName",headerName:"품목",width:120},{field:"contractTon",headerName:"무게",valueFormatter:e=>`${e.value}톤`,width:100},{field:"unitPrice",headerName:"단가",valueFormatter:l,width:130},{field:"totalPrice",headerName:"단가 * 무게",valueFormatter:l,width:150},{field:"paymentMethod",headerName:"결제방식",width:100},{field:"warehouseEntryDate",headerName:"입고일",valueFormatter:c,width:150},{field:"importCostPerKg",headerName:"수입가/kg",valueFormatter:y,width:130},{field:"supplyCostPerKg",headerName:"수급가/kg",valueFormatter:y,width:130},{field:"totalCost",headerName:"총 비용",valueFormatter:l,width:150},{field:"totalCostPerKg",headerName:"총 비용/kg",valueFormatter:y,width:130},{field:"sellingPrice",headerName:"판매가",valueFormatter:l,width:130},{field:"margin",headerName:"마진",valueFormatter:l,width:100},{field:"totalProfit",headerName:"총 이익",valueFormatter:l,width:150}],p=[{field:"contractNumber",headerName:"계약 번호",width:130},{field:"progressStatus",headerName:"진행 상태",width:100},{field:"contractDate",headerName:"계약일자",valueFormatter:c,width:150},{field:"importer",headerName:"수입회사",width:120},{field:"productName",headerName:"제품명",width:150},{field:"itemName",headerName:"품목",width:120},{field:"weight",headerName:"무게",valueFormatter:e=>`${e.value}톤`,width:100},{field:"containerCount",headerName:"컨테이너 개수",width:120},{field:"packingUnit",headerName:"포장 단위",width:100},{field:"unitPrice",headerName:"단가",valueFormatter:l,width:130},{field:"totalPrice",headerName:"단가 * 무게",valueFormatter:l,width:150},{field:"supplyPrice",headerName:"수급가",valueFormatter:l,width:130},{field:"sellingPrice",headerName:"판매가",valueFormatter:l,width:130},{field:"paymentMethod",headerName:"결제방식",width:100},{field:"hsCode",headerName:"HS CODE",width:120},{field:"blNumber",headerName:"BL no.",width:120},{field:"departurePort",headerName:"port(출발항)",width:120},{field:"etd",headerName:"ETD",valueFormatter:c,width:150},{field:"arrivalPort",headerName:"port(도착항)",width:120},{field:"eta",headerName:"ETA",valueFormatter:c,width:150},{field:"exporter",headerName:"공급업체",width:120},{field:"customsDate",headerName:"통관일자",valueFormatter:c,width:150}],h=u.map(e=>e.field),w=p.map(e=>e.field),f=(0,r.D)("importers",{id:(0,n.Qq)("id").primaryKey(),importerName:(0,n.Qq)("importer_name").notNull(),calculationType:(0,n.Qq)("calculation_type").notNull()}),g=(0,r.D)("payments",{id:(0,n.Qq)("id").primaryKey(),paymentDueDate:(0,n.Qq)("payment_due_date"),paymentMethod:(0,n.Qq)("payment_method").notNull(),contractId:(0,n.Qq)("contract_id").notNull()},e=>[(0,i.z6)("payment_type_check",(0,d.ll)`${e.paymentMethod} IN ('T/T', 'CAD', 'L/C', 'Usance')`)]),_=(0,r.D)("payments_tt",{paymentId:(0,n.Qq)("payment_id").primaryKey().references(()=>g.id,{onDelete:"cascade"}),advancePaymentDate:(0,n.Qq)("advance_payment_date"),advancePaymentRatio:(0,s.x)("advance_payment_ratio"),advancePaymentAmount:(0,s.x)("advance_payment_amount"),remainingPaymentDate:(0,n.Qq)("remaining_payment_date"),remainingPaymentRatio:(0,s.x)("remaining_payment_ratio"),remainingPaymentAmount:(0,s.x)("remaining_payment_amount"),counterpartBank:(0,n.Qq)("counterpart_bank")}),N=(0,r.D)("payments_usance",{paymentId:(0,n.Qq)("payment_id").primaryKey().references(()=>g.id,{onDelete:"cascade"}),paymentTerm:(0,n.Qq)("payment_term"),contractExchangeRate:(0,n.Qq)("contact_exchange_rate")}),q=(0,r.D)("cost_details",{id:(0,n.Qq)("id").primaryKey(),unitPrice:(0,s.x)("unit_price"),exchangeRate:(0,s.x)("exchange_rate"),customsTaxRate:(0,s.x)("customs_tax_rate"),customTaxAmount:(0,s.x)("custom_tax_amount"),customsFee:(0,s.x)("customs_fee"),inspectionFee:(0,s.x)("inspection_fee"),doCharge:(0,s.x)("do_charge"),otherCosts:(0,s.x)("other_costs"),transferFee:(0,s.x)("transfer_fee"),costId:(0,n.Qq)("cost_id").notNull()}),v=(0,r.D)("contracts",{id:(0,n.Qq)("id").primaryKey(),contractNumber:(0,n.Qq)("contract_number"),contractDate:(0,n.Qq)("contract_date"),exporter:(0,n.Qq)("exporter"),importerId:(0,n.Qq)("importer_id").references(()=>f.id),incoterms:(0,n.Qq)("incoterms")}),P=(0,r.D)("items",{id:(0,n.Qq)("id").primaryKey(),itemName:(0,n.Qq)("item_name"),itemVariety:(0,n.Qq)("item_variety"),originCountry:(0,n.Qq)("origin_country"),hsCode:(0,n.Qq)("hs_code"),packingUnit:(0,n.Qq)("packing_unit")}),D=(0,r.D)("costs",{id:(0,n.Qq)("id").primaryKey(),supplyPrice:(0,s.x)("supply_price"),shippingCost:(0,s.x)("shipping_cost"),laborCost:(0,s.x)("labor_cost"),transportStorageFee:(0,s.x)("transport_storage_fee"),loadingUnloadingFee:(0,s.x)("loading_unloading_fee"),usanceInterest:(0,s.x)("usance_interest"),cargoId:(0,n.Qq)("cargo_id").notNull()}),I=(0,r.D)("users",{id:(0,n.Qq)("id").primaryKey(),email:(0,n.Qq)("email"),password:(0,n.Qq)("password"),name:(0,n.Qq)("name"),planColumnOrder:(0,n.Qq)("plan_column_order").default(JSON.stringify(h)),shipmentColumnOrder:(0,n.Qq)("shipment_column_order").default(JSON.stringify(w))}),A=(0,r.D)("shipments",{id:(0,n.Qq)("id").primaryKey(),contractId:(0,n.Qq)("contract_id").notNull(),estimatedTimeArrival:(0,n.Qq)("estimated_time_arrival"),estimatedTimeDeparture:(0,n.Qq)("estimated_time_departure"),arrivalPort:(0,n.Qq)("arrival_port"),shippingCompany:(0,n.Qq)("shipping_company"),departurePort:(0,n.Qq)("departure_port"),blNumber:(0,n.Qq)("bl_number"),palletOrderDate:(0,n.Qq)("pallet_order_date"),palletType:(0,n.Qq)("pallet_type")}),R=(0,r.D)("cargos",{id:(0,n.Qq)("id").primaryKey(),itemsId:(0,n.Qq)("items_id").notNull(),shipmentId:(0,n.Qq)("shipment_id").notNull(),containerCount:(0,m.nd)("container_count"),contractTon:(0,m.nd)("contract_ton"),customsClearanceDate:(0,n.Qq)("customs_clearance_date"),quarantineDate:(0,n.Qq)("quarantine_date"),warehouseEntryDate:(0,n.Qq)("warehouse_entry_date"),progressStatus:(0,n.Qq)("progress_status"),sellingPrice:(0,s.x)("selling_price"),sellingPriceWholesale:(0,s.x)("selling_price_wholesale"),sellingPriceRetail:(0,s.x)("selling_price_retail"),margin:(0,s.x)("margin"),totalProfit:(0,s.x)("total_profit"),purchaseFeeRate:(0,s.x)("purchase_fee_rate"),remark:(0,n.Qq)("remark")},e=>[(0,i.z6)("progress_status_check",(0,d.ll)`${e.progressStatus} IN ('REVIEW', 'CONTRACTING', 'BEFORE_LC', 'BEFORE_ARRIVAL', 'WAREHOUSE_MOVING', 'BEFORE_QUARANTINE', 'QUARANTINING', 'CUSTOMS_DECLARING', 'DONE_ARRIVAL', 'AFTER_CUSTOMS', 'SELLING')`)]),T=(0,r.D)("documents",{id:(0,n.Qq)("id").primaryKey(),documentName:(0,n.Qq)("document_name").notNull(),documentType:(0,n.Qq)("document_type").notNull(),s3Url:(0,n.Qq)("s3_url").notNull(),uploadDate:(0,n.Qq)("upload_date").notNull(),relatedId:(0,n.Qq)("related_id").notNull(),documentCategory:(0,n.Qq)("document_category").notNull()}),b=(0,r.D)("history_logs",{id:(0,n.Qq)("id").primaryKey(),targetType:(0,n.Qq)("target_type"),targetId:(0,n.Qq)("target_id"),type:(0,n.Qq)("type"),user:(0,n.Qq)("user"),changes:(0,n.Qq)("changes"),status:(0,n.Qq)("status"),createdAt:(0,n.Qq)("created_at")}),Q=(0,o.K1)(f,({many:e})=>({contracts:e(v)})),E=(0,o.K1)(g,({one:e})=>({contract:e(v,{fields:[g.contractId],references:[v.id]}),paymentsTt:e(_,{fields:[g.id],references:[_.paymentId]}),paymentsUsance:e(N,{fields:[g.id],references:[N.paymentId]})})),C=(0,o.K1)(_,({one:e})=>({payment:e(g,{fields:[_.paymentId],references:[g.id]})})),U=(0,o.K1)(N,({one:e})=>({payment:e(g,{fields:[N.paymentId],references:[g.id]})})),x=(0,o.K1)(q,({one:e})=>({cost:e(D,{fields:[q.costId],references:[D.id]})})),B=(0,o.K1)(v,({many:e,one:t})=>({payments:e(g),shipments:e(A),documents:e(T),importer:t(f,{fields:[v.importerId],references:[f.id]})})),F=(0,o.K1)(P,({many:e})=>({cargos:e(R)})),K=(0,o.K1)(D,({one:e,many:t})=>({cargo:e(R,{fields:[D.cargoId],references:[R.id]}),costDetails:t(q)})),k=(0,o.K1)(A,({one:e,many:t})=>({contract:e(v,{fields:[A.contractId],references:[v.id]}),cargos:t(R),documents:t(T)})),S=(0,o.K1)(R,({one:e,many:t})=>({item:e(P,{fields:[R.itemsId],references:[P.id]}),shipment:e(A,{fields:[R.shipmentId],references:[A.id]}),costs:t(D)})),M=(0,o.K1)(T,({one:e})=>({contract:e(v,{fields:[T.relatedId],references:[v.id],relationName:"contract_documents"}),shipment:e(A,{fields:[T.relatedId],references:[A.id],relationName:"shipment_documents"})})),O=(0,o.K1)(b,({})=>({}))},10854:(e,t,a)=>{a.d(t,{A:()=>r});var r=function(e){return e.STANDARD="STANDARD",e.DNB="DNB",e.NAMHAE="NAMHAE",e}({})},13913:(e,t,a)=>{a.d(t,{db:()=>c});var r=a(58622),n=a(87550),i=a.n(n),s=a(8613),m=a(33873);let d=a.n(m)().join(process.cwd(),"drizzle","database.sqlite"),o=new(i())(d),c=(0,r.f)(o,{schema:s})},21316:(e,t,a)=>{a.d(t,{Y:()=>o});var r=a(13913),n=a(8613),i=a(26763),s=a(10854),m=a(98149),d=a(70564);class o{async createImporter(e,t){try{let[a]=await r.db.insert(n.importers).values({id:(0,i.Ak)(),importerName:e,calculationType:t}).returning();return{...a}}catch(e){throw console.error("수입업체 생성 중 오류:",e),Error(`수입업체 생성 실패: ${e instanceof Error?e.message:"알 수 없는 오류"}`)}}async getAllImporters(){try{return(await r.db.query.importers.findMany()).map(e=>({...e}))}catch(e){throw console.error("수입업체 조회 중 오류:",e),Error(`수입업체 조회 실패: ${e instanceof Error?e.message:"알 수 없는 오류"}`)}}async getImporterById(e){try{let t=await r.db.query.importers.findFirst({where:(0,m.eq)(n.importers.id,e)});if(!t)throw Error("수입업체를 찾을 수 없습니다.");return{...t}}catch(e){throw console.error("수입업체 조회 중 오류:",e),Error(`수입업체 조회 실패: ${e instanceof Error?e.message:"알 수 없는 오류"}`)}}async updateImporter(e,t){let a=new d.y;try{if(!t.importerName)throw Error("이름이 필요합니다.");let e=await this.findByName(t.importerName);if(e)return(await a.findByImporterId(e.id)).length<2&&this.deleteImporter(e.id),e;let r=await this.createImporter(t.importerName,function(e){switch(e){case"DNB":return s.A.DNB;case"남해":return s.A.NAMHAE;default:return s.A.STANDARD}}(t.importerName));if(!r)throw Error("수입업체를 찾을 수 없습니다.");return{...r}}catch(e){throw console.error("수입업체 업데이트 중 오류:",e),Error(`수입업체 업데이트 실패: ${e instanceof Error?e.message:"알 수 없는 오류"}`)}}async deleteImporter(e){try{let[t]=await r.db.delete(n.importers).where((0,m.eq)(n.importers.id,e)).returning();if(!t)throw Error("수입업체를 찾을 수 없습니다.");return{...t}}catch(e){throw console.error("수입업체 삭제 중 오류:",e),Error(`수입업체 삭제 실패: ${e instanceof Error?e.message:"알 수 없는 오류"}`)}}async searchImportersByName(e){try{return(await r.db.query.importers.findMany({where:(0,m.mj)(n.importers.importerName,`%${e}%`)})).map(e=>({...e}))}catch(e){throw console.error("수입업체 검색 중 오류:",e),Error(`수입업체 검색 실패: ${e instanceof Error?e.message:"알 수 없는 오류"}`)}}async findByName(e){let[t]=await r.db.select().from(n.importers).where((0,m.eq)(n.importers.importerName,e));return t}}},22168:(e,t,a)=>{a.d(t,{q:()=>s});var r=a(13913),n=a(8613),i=a(98149);class s{async create(e){let[t]=await r.db.insert(n.cargos).values(e).returning();return t}async findById(e){let[t]=await r.db.select().from(n.cargos).where((0,i.eq)(n.cargos.id,e));return t}async findAll(){return await r.db.select().from(n.cargos)}async findByShipmentId(e){return await r.db.select().from(n.cargos).where((0,i.eq)(n.cargos.shipmentId,e))}async update(e,t){let[a]=await r.db.update(n.cargos).set(t).where((0,i.eq)(n.cargos.id,e)).returning();return a}async delete(e){let[t]=await r.db.delete(n.cargos).where((0,i.eq)(n.cargos.id,e)).returning();return t}}},22327:(e,t,a)=>{a.d(t,{G:()=>s});var r=a(13913),n=a(8613),i=a(98149);class s{async create(e){let[t]=await r.db.insert(n.costDetails).values(e).returning();return t}async findById(e){let[t]=await r.db.select().from(n.costDetails).where((0,i.eq)(n.costDetails.id,e));return t}async findAll(){return await r.db.select().from(n.costDetails)}async findByCostId(e){let[t]=await r.db.select().from(n.costDetails).where((0,i.eq)(n.costDetails.costId,e));return t}async update(e,t){let[a]=await r.db.update(n.costDetails).set(t).where((0,i.eq)(n.costDetails.id,e)).returning();return a}async delete(e){let[t]=await r.db.delete(n.costDetails).where((0,i.eq)(n.costDetails.id,e)).returning();return t}async deleteByCostId(e){let t=await this.findByCostId(e);t&&await this.delete(t.id)}}},37988:(e,t,a)=>{a.d(t,{o:()=>m});var r=a(13913),n=a(8613),i=a(98149),s=a(22168);class m{constructor(){this.cargoService=new s.q}async create(e){let[t]=await r.db.insert(n.shipments).values(e).returning();return t}async findById(e){let[t]=await r.db.select().from(n.shipments).where((0,i.eq)(n.shipments.id,e));return t}async findAll(){return await r.db.select().from(n.shipments)}async findByContractId(e){return await r.db.select().from(n.shipments).where((0,i.eq)(n.shipments.contractId,e))}async update(e,t){let[a]=await r.db.update(n.shipments).set(t).where((0,i.eq)(n.shipments.id,e)).returning();return a}async delete(e){let t=await this.cargoService.findByShipmentId(e);await Promise.all(t.map(e=>this.cargoService.delete(e.id)));let[a]=await r.db.delete(n.shipments).where((0,i.eq)(n.shipments.id,e)).returning();return a}}},54022:(e,t,a)=>{a.d(t,{W:()=>s});var r=a(13913),n=a(8613),i=a(98149);class s{async createWithDetails(e){try{let[t]=await r.db.insert(n.payments).values(e.payment).returning();switch(e.payment.paymentMethod){case"T/T":if(!e.paymentTt)throw Error("T/T 결제 방식에는 paymentTt 데이터가 필요합니다.");await this.createTt({...e.paymentTt,paymentId:t.id});break;case"Usance":if(!e.paymentUsance)throw Error("Usance 결제 방식에는 paymentUsance 데이터가 필요합니다.");await this.createUsance({...e.paymentUsance,paymentId:t.id});break;case"CAD":case"L/C":break;default:throw Error(`지원하지 않는 결제 방식입니다: ${e.payment.paymentMethod}`)}return t}catch(e){throw console.error("결제 정보 생성 중 오류 발생:",e),e}}async create(e){let[t]=await r.db.insert(n.payments).values(e).returning();return t}async createTt(e){let[t]=await r.db.insert(n.paymentsTt).values(e).returning();return t}async createUsance(e){let[t]=await r.db.insert(n.paymentsUsance).values(e).returning();return t}async findById(e){let[t]=await r.db.select().from(n.payments).where((0,i.eq)(n.payments.id,e));return t}async findTtByPaymentId(e){let[t]=await r.db.select().from(n.paymentsTt).where((0,i.eq)(n.paymentsTt.paymentId,e));return t}async findUsanceByPaymentId(e){let[t]=await r.db.select().from(n.paymentsUsance).where((0,i.eq)(n.paymentsUsance.paymentId,e));return t}async findAll(){let e=await r.db.select().from(n.payments);return await Promise.all(e.map(async e=>{let[t]=await r.db.select().from(n.paymentsTt).where((0,i.eq)(n.paymentsTt.paymentId,e.id)),[a]=await r.db.select().from(n.paymentsUsance).where((0,i.eq)(n.paymentsUsance.paymentId,e.id)),s=t?(t.advancePaymentAmount||0)+(t.remainingPaymentAmount||0):0;return{...e,paymentDueDate:e.paymentDueDate,advancePaymentDate:t?.advancePaymentDate??null,advancePaymentRatio:t?.advancePaymentRatio??null,advancePaymentAmount:t?.advancePaymentAmount??null,remainingPaymentDate:t?.remainingPaymentDate??null,remainingPaymentRatio:t?.remainingPaymentRatio??null,remainingPaymentAmount:t?.remainingPaymentAmount??null,counterpartBank:t?.counterpartBank??null,paymentTerm:a?.paymentTerm??null,contractExchangeRate:a?.contractExchangeRate??null,totalContractAmount:s}}))}async findByContractId(e){let[t]=await r.db.select().from(n.payments).where((0,i.eq)(n.payments.contractId,e));if(!t)return null;let[a]=await r.db.select().from(n.paymentsTt).where((0,i.eq)(n.paymentsTt.paymentId,t.id)),[s]=await r.db.select().from(n.paymentsUsance).where((0,i.eq)(n.paymentsUsance.paymentId,t.id)),m=a?(a.advancePaymentAmount||0)+(a.remainingPaymentAmount||0):0;return{...t,paymentDueDate:t.paymentDueDate,advancePaymentDate:a?.advancePaymentDate??null,advancePaymentRatio:a?.advancePaymentRatio??null,advancePaymentAmount:a?.advancePaymentAmount??null,remainingPaymentDate:a?.remainingPaymentDate??null,remainingPaymentRatio:a?.remainingPaymentRatio??null,remainingPaymentAmount:a?.remainingPaymentAmount??null,counterpartBank:a?.counterpartBank??null,paymentTerm:s?.paymentTerm??null,contractExchangeRate:s?.contractExchangeRate??null,totalContractAmount:m}}async update(e,t){try{let[a]=await r.db.select().from(n.payments).where((0,i.eq)(n.payments.id,e));if(!a)throw Error("결제 정보를 찾을 수 없습니다.");if(a.paymentMethod!==t.paymentMethod){switch(a.paymentMethod){case"T/T":await this.deleteTt(e);break;case"Usance":await this.deleteUsance(e)}switch(t.paymentMethod){case"T/T":if(!t.advancePaymentDate||!t.remainingPaymentDate)throw Error("T/T 결제 방식에는 선급금과 잔금 날짜가 필요합니다.");await this.createTt({paymentId:e,advancePaymentDate:t.advancePaymentDate,advancePaymentRatio:t.advancePaymentRatio||30,advancePaymentAmount:(t.totalContractAmount||0)*(t.advancePaymentRatio||30)/100,remainingPaymentDate:t.remainingPaymentDate,remainingPaymentRatio:t.remainingPaymentRatio||70,remainingPaymentAmount:(t.totalContractAmount||0)*(t.remainingPaymentRatio||70)/100,counterpartBank:t.counterpartBank||""});break;case"Usance":if(!t.paymentTerm)throw Error("Usance 결제 방식에는 결제 기간이 필요합니다.");await this.createUsance({paymentId:e,paymentTerm:t.paymentTerm})}}else switch(t.paymentMethod){case"T/T":if(!t.advancePaymentDate||!t.remainingPaymentDate)throw Error("T/T 결제 방식에는 선급금과 잔금 날짜가 필요합니다.");await this.updateTt(e,{advancePaymentDate:t.advancePaymentDate,advancePaymentRatio:t.advancePaymentRatio,remainingPaymentDate:t.remainingPaymentDate,remainingPaymentRatio:t.remainingPaymentRatio,counterpartBank:t.counterpartBank||"",advancePaymentAmount:(t.totalContractAmount||0)*(t.advancePaymentRatio||30)/100,remainingPaymentAmount:(t.totalContractAmount||0)*(t.remainingPaymentRatio||70)/100});break;case"Usance":if(!t.paymentTerm)throw Error("Usance 결제 방식에는 결제 기간이 필요합니다.");await this.updateUsance(e,{paymentTerm:t.paymentTerm})}let[s]=await r.db.update(n.payments).set({paymentMethod:t.paymentMethod,paymentDueDate:t.paymentDueDate}).where((0,i.eq)(n.payments.id,e)).returning();return s}catch(e){throw console.error("결제 정보 업데이트 중 오류 발생:",e),e}}async updateTt(e,t){if(void 0!==t.advancePaymentRatio&&null!==t.advancePaymentRatio){let e=(t.advancePaymentAmount||0)+(t.remainingPaymentAmount||0),a=this.calculatePaymentRatios({totalContractAmount:e,advancePaymentRatio:t.advancePaymentRatio});t={...t,advancePaymentAmount:a.advancePaymentAmount,remainingPaymentAmount:a.remainingPaymentAmount}}let[a]=await r.db.update(n.paymentsTt).set(t).where((0,i.eq)(n.paymentsTt.paymentId,e)).returning();return a}async updateUsance(e,t){let[a]=await r.db.update(n.paymentsUsance).set(t).where((0,i.eq)(n.paymentsUsance.paymentId,e)).returning();return a}async delete(e){let[t]=await r.db.delete(n.payments).where((0,i.eq)(n.payments.id,e)).returning();return t}async deleteTt(e){let[t]=await r.db.delete(n.paymentsTt).where((0,i.eq)(n.paymentsTt.paymentId,e)).returning();return t}async deleteUsance(e){let[t]=await r.db.delete(n.paymentsUsance).where((0,i.eq)(n.paymentsUsance.paymentId,e)).returning();return t}calculatePaymentRatios(e){let{totalContractAmount:t,advancePaymentRatio:a=30}=e,r=Math.round(t*a/100);return{advancePaymentRatio:a,remainingPaymentRatio:100-a,advancePaymentAmount:r,remainingPaymentAmount:t-r}}}},70564:(e,t,a)=>{a.d(t,{y:()=>s});var r=a(13913),n=a(8613),i=a(98149);class s{async create(e){let[t]=await r.db.insert(n.contracts).values(e).returning();return t}async findById(e){let[t]=await r.db.select().from(n.contracts).where((0,i.eq)(n.contracts.id,e));return t}async findAll(){return await r.db.select().from(n.contracts)}async findByImporterId(e){return await r.db.select().from(n.contracts).where((0,i.eq)(n.contracts.importerId,e))}async update(e,t){let[a]=await r.db.update(n.contracts).set(t).where((0,i.eq)(n.contracts.id,e)).returning();return a}async delete(e){let[t]=await r.db.delete(n.contracts).where((0,i.eq)(n.contracts.id,e)).returning();return t}}},73103:(e,t,a)=>{a.d(t,{LE:()=>r});let r={REVIEW:"검토중",CONTRACTING:"계약중",BEFORE_LC:"L/C오픈전",BEFORE_ARRIVAL:"입항전",WAREHOUSE_MOVING:"창고 이동중",BEFORE_QUARANTINE:"검역전",QUARANTINING:"검역중",CUSTOMS_DECLARING:"세관신고중",DONE_ARRIVAL:"입항완료",AFTER_CUSTOMS:"통관완료",SELLING:"판매중"}}};
